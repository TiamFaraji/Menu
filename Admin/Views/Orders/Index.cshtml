@using Core.OrderService
@model List<AdminOrderDto>

@{
    ViewData["Title"] = "Order Management";
}


<div style="display: none;">
    <h4>Debug Data</h4>
    <p>Total Orders: @Model.Count</p>
    @foreach (var order in Model)
    {
        <div>
            <h5>Order @order.Id</h5>
            <p>Items: @order.Items?.Count</p>
            @if (order.Items != null)
            {
                <ul>
                    @foreach (var item in order.Items)
                    {
                        <li>
                            @item.ProductName (ID: @item.ProductId) -
                            @item.Quantity x @item.Price.ToString("C")
                        </li>
                    }
                </ul>
            }
        </div>
    }
</div> 



<div class="admin-orders-page">
    <div class="admin-header">
        <h1 class="admin-title">Order Management</h1>
        <div class="admin-actions">
            <a href="/Categories" class="admin-back-btn">
                <i class="fas fa-arrow-left"></i> Back to Shop
            </a>
        </div>
    </div>

    @if (Model.Count == 0)
    {
        <div class="admin-empty-state">
            <i class="fas fa-clipboard-list empty-icon"></i>
            <p>No orders found</p>
            <a href="/" class="admin-btn primary">View Products</a>
        </div>
    }
    else
    {
        <div class="orders-grid">
            @foreach (var order in Model)
            {
                <div class="order-card @order.Status.ToString().ToLower()">
                    <div class="order-card-header">
                        <span class="order-id">Order #@order.Id</span>
                        <span class="order-date">@order.Payed.ToString("MMM dd, yyyy")</span>
                        <span class="order-status @order.Status.ToString().ToLower()">
                            @switch (order.Status)
                            {
                                case DataAccess.Enums.Status.Accepted:
                                    <i class="fas fa-check-circle">Delivered</i>
                                    
                            break;
                                case DataAccess.Enums.Status.Rejected:
                                    <i class="fas fa-times-circle">Rejected</i>
                                    
                            break;
                                case DataAccess.Enums.Status.Final:
                                    <i class="fas fa-clock">Pending</i>
                                    
                            break;
                            }
                        </span>
                    </div>

                    <div class="order-card-body">
                        <div class="order-info">
                            <div><i class="fas fa-user"></i> @order.UserName</div>
                            <div><i class="fas fa-map-marker-alt"></i> @order.Address</div>
                            <div><i class="fas fa-phone"></i> @order.Phone</div>
                        </div>

                        <div class="order-items">
                            @if (order.Items != null && order.Items.Count > 0)
                            {
                                @foreach (var itemGroup in order.Items.GroupBy(i => i.ProductId))
                                {
                                    var firstItem = itemGroup.First();
                                    var totalQty = itemGroup.Sum(i => i.Quantity);
                                    <div class="order-item">
                                        <span>@firstItem.ProductName × @totalQty</span>
                                        <span>@((totalQty * firstItem.Price).ToString("C"))</span>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="no-items">No items found in this order</div>
                            }
                        </div>

                        <div class="order-total">
                            Total: @order.Items.Sum(i => i.Price * i.Quantity).ToString("C")
                        </div>

                        <div class="order-actions">
                            <a asp-controller="Orders" asp-action="Edit" asp-route-id="@order.Id" class="admin-btn">
                                <i class="fas fa-edit"></i> Manage
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .order-items {
        margin: 15px 0;
        border-top: 1px solid #eee;
        border-bottom: 1px solid #eee;
        padding: 10px 0;
    }

    .order-item {
        display: flex;
        justify-content: space-between;
        margin: 5px 0;
    }

    .order-total {
        font-weight: bold;
        text-align: right;
        margin-top: 10px;
        font-size: 1.1em;
    }
</style>